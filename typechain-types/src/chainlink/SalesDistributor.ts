/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace SalesDistributor {
  export type DistributionDetailsStruct = {
    nftAddress: PromiseOrValue<string>;
    orderId: PromiseOrValue<string>;
    totalSale: PromiseOrValue<BigNumberish>;
    totalProfit: PromiseOrValue<BigNumberish>;
  };

  export type DistributionDetailsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    nftAddress: string;
    orderId: string;
    totalSale: BigNumber;
    totalProfit: BigNumber;
  };
}

export interface SalesDistributorInterface extends utils.Interface {
  functions: {
    "USDC_ADDRESS()": FunctionFragment;
    "distributeProfits((address,string,uint256,uint256))": FunctionFragment;
    "getDistributionByNftAddress(address)": FunctionFragment;
    "getUserProfit(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "salesDistributorClient()": FunctionFragment;
    "setSalesDistributorClient(address)": FunctionFragment;
    "totalDistributedProfit(address)": FunctionFragment;
    "totalDistributedSales(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userProfits(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "USDC_ADDRESS"
      | "distributeProfits"
      | "getDistributionByNftAddress"
      | "getUserProfit"
      | "owner"
      | "renounceOwnership"
      | "salesDistributorClient"
      | "setSalesDistributorClient"
      | "totalDistributedProfit"
      | "totalDistributedSales"
      | "transferOwnership"
      | "userProfits"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "USDC_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeProfits",
    values: [SalesDistributor.DistributionDetailsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionByNftAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserProfit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "salesDistributorClient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSalesDistributorClient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDistributedProfit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDistributedSales",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userProfits",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "USDC_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeProfits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionByNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "salesDistributorClient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSalesDistributorClient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDistributedProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDistributedSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userProfits",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ProfitsDistributed(address,string,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfitsDistributed"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProfitsDistributedEventObject {
  nftAddress: string;
  orderId: string;
  totalSale: BigNumber;
  totalProfit: BigNumber;
}
export type ProfitsDistributedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ProfitsDistributedEventObject
>;

export type ProfitsDistributedEventFilter =
  TypedEventFilter<ProfitsDistributedEvent>;

export interface SalesDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SalesDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    USDC_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    distributeProfits(
      distributionDetails: SalesDistributor.DistributionDetailsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDistributionByNftAddress(
      nftAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getUserProfit(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    salesDistributorClient(overrides?: CallOverrides): Promise<[string]>;

    setSalesDistributorClient(
      _salesDistributorClient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalDistributedProfit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalDistributedSales(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userProfits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  USDC_ADDRESS(overrides?: CallOverrides): Promise<string>;

  distributeProfits(
    distributionDetails: SalesDistributor.DistributionDetailsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDistributionByNftAddress(
    nftAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getUserProfit(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  salesDistributorClient(overrides?: CallOverrides): Promise<string>;

  setSalesDistributorClient(
    _salesDistributorClient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalDistributedProfit(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalDistributedSales(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userProfits(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    USDC_ADDRESS(overrides?: CallOverrides): Promise<string>;

    distributeProfits(
      distributionDetails: SalesDistributor.DistributionDetailsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getDistributionByNftAddress(
      nftAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getUserProfit(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    salesDistributorClient(overrides?: CallOverrides): Promise<string>;

    setSalesDistributorClient(
      _salesDistributorClient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalDistributedProfit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDistributedSales(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userProfits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ProfitsDistributed(address,string,uint256,uint256)"(
      nftAddress?: PromiseOrValue<string> | null,
      orderId?: null,
      totalSale?: null,
      totalProfit?: null
    ): ProfitsDistributedEventFilter;
    ProfitsDistributed(
      nftAddress?: PromiseOrValue<string> | null,
      orderId?: null,
      totalSale?: null,
      totalProfit?: null
    ): ProfitsDistributedEventFilter;
  };

  estimateGas: {
    USDC_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    distributeProfits(
      distributionDetails: SalesDistributor.DistributionDetailsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDistributionByNftAddress(
      nftAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserProfit(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    salesDistributorClient(overrides?: CallOverrides): Promise<BigNumber>;

    setSalesDistributorClient(
      _salesDistributorClient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalDistributedProfit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDistributedSales(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userProfits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    USDC_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeProfits(
      distributionDetails: SalesDistributor.DistributionDetailsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDistributionByNftAddress(
      nftAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserProfit(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    salesDistributorClient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setSalesDistributorClient(
      _salesDistributorClient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalDistributedProfit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDistributedSales(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userProfits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
